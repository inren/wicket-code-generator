/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package ${package};

${entityImport}
${factoryImport}
import java.util.ArrayList;
import java.util.List;

import net.databinder.models.hib.CriteriaBuildAndSort;
import net.databinder.models.hib.SortableHibernateProvider;

import org.apache.wicket.ajax.AjaxRequestTarget;
import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackHeadersToolbar;
import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;
import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;
import org.apache.wicket.extensions.markup.html.repeater.data.table.DataTable;
import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;
import org.apache.wicket.extensions.markup.html.repeater.data.table.NoRecordsToolbar;
import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;
import org.apache.wicket.markup.html.panel.Panel;
import org.apache.wicket.markup.repeater.Item;
import org.apache.wicket.model.IModel;
import org.apache.wicket.model.ResourceModel;
import org.apache.wicket.util.visit.IVisit;
import org.apache.wicket.util.visit.IVisitor;

import cz.newforms.wicket.markup.html.navigation.paging.InvisibleBootstrapAjaxPagingNavigator;
import cz.newforms.wicket.markup.html.panel.AjaxPanel;
import name.berries.wicket.bootstrap.datatable.BootstrapDataTablePanel;
import de.agilecoders.wicket.core.markup.html.bootstrap.button.BootstrapAjaxLink;
import de.agilecoders.wicket.core.markup.html.bootstrap.button.BootstrapLink;
import de.agilecoders.wicket.core.markup.html.bootstrap.button.Buttons;
import de.agilecoders.wicket.extensions.markup.html.bootstrap.icon.FontAwesomeIconType;


/**
 * @author rozkovec
 */
public class ${javaComponent} extends AjaxPanel
{

	/**
	 * Construct.
	 * 
	 * @param id
	 * @param model
	 */
	public ${javaComponent}(String id)
	{
		super(id);
	}

	@Override
	protected void onInitialize()
	{
		super.onInitialize();
		
		List<IColumn<${className}, String>> columns = new ArrayList<IColumn<${className}, String>>();
		
#foreach( $wrapper in $columns )
		columns.add(new PropertyColumn<${className}, String>(new ResourceModel("${wrapper.resourceKey}", "${wrapper.nameCapitalized}"), "${wrapper.propertyExpression}", "${wrapper.propertyExpression}"));
#end
		
		columns.add(new AbstractColumn<${className}, String>(new ResourceModel("${actionKey}", "${actionValue}"))
		{
			public void populateItem(Item<ICellPopulator<${className}>> cellItem, String componentId,
				IModel<${className}> rowModel)
			{
				cellItem.add(new ${actionsPanelComponent}(componentId, rowModel));
			}
		});
		
		CriteriaBuildAndSort cb = new CriteriaBuildAndSort("id", false, false)
		{
		};

		SortableHibernateProvider<${className}, String> provider = new SortableHibernateProvider<${className}, String>(${className}.class,
			cb);
		

		BootstrapDataTablePanel<${className}, String> table = new BootstrapDataTablePanel<${className}, String>("datatable", columns, provider,
			12);
		table.setOutputMarkupId(true);
		add(table);
		
		
		BootstrapAjaxLink<${className}> newRecordButton;
		add(newRecordButton = new BootstrapAjaxLink<${className}>("create", Buttons.Type.Primary)
		{
			@Override
			public void onClick(AjaxRequestTarget target)
			{
				visitParents(${javaComponent}.class, new IVisitor<${javaComponent}, Void>()
				{
					public void component(${javaComponent} panel, IVisit<Void> visit)
					{
						$javaComponentEdit newPanel;
						panel.replaceWith(newPanel = ${factoryComponent}.newEditor(panel.getId()));
						visit.stop();
						target.add(newPanel);
					}
				});
			}
		}.setIconType(FontAwesomeIconType.plus));
		newRecordButton.setLabel(new ResourceModel("${createRecordKey}", "${createRecordDefaultValue}"));
	}
}
